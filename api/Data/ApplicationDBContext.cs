using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using api.Model;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;

namespace api.Data
{
    public class ApplicationDBContext : IdentityDbContext<AppUser>
    {
        public ApplicationDBContext(DbContextOptions dbContextOptions)
        : base(dbContextOptions)
        {

        }

        public DbSet<Stock> Stocks { get; set; }
        public DbSet<Comment> Comments { get; set; }
        public DbSet<Portfolio> Portfolios { get; set; }

        protected override void OnModelCreating(ModelBuilder builder)
        {
            base.OnModelCreating(builder);

            //declare composite PK because it not have dedicated PK
            builder.Entity<Portfolio>(x => x.HasKey(p => new { p.AppUserID, p.StockID }));

            //to declare many to many relation ship by declare one to many for each one
            builder.Entity<Portfolio>()
                .HasOne(u => u.AppUsers)
                .WithMany(u => u.Portfolios)
                .HasForeignKey(p => p.AppUserID);
            builder.Entity<Portfolio>()
                .HasOne(u => u.Stocks)
                .WithMany(u => u.Portfolios)
                .HasForeignKey(p => p.StockID);
            // Tell EF Core that the values for these PK properties will be provided by the application,
            // and should NOT be generated by the database.
            builder.Entity<Portfolio>().Property(p => p.AppUserID).ValueGeneratedNever();
            builder.Entity<Portfolio>().Property(p => p.StockID).ValueGeneratedNever();

            const string ADMIN_ID = "9df37c8e-d872-43bb-908f-d10cca281322";
            const string USER_ID = "28c53146-6557-433b-8aa6-88391974bc55";

            List<IdentityRole> roles = new List<IdentityRole>
            {
                new IdentityRole{
                    Id = ADMIN_ID,
                    Name = "Admin",
                    NormalizedName = "ADMIN",
                    ConcurrencyStamp = ADMIN_ID
                },
                new IdentityRole{
                    Id = USER_ID,
                    Name = "User",
                    NormalizedName = "USER",
                    ConcurrencyStamp = USER_ID
                }
            };

            //insert data
            builder.Entity<IdentityRole>().HasData(roles);
        }
    }
}